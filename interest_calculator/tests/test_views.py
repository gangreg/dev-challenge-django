"""
Views tests
"""

from django.test import SimpleTestCase, Client
from interest_calculator.serializer import CalculateSerializer

class CalculateViewTestCase(SimpleTestCase):
    """
    Test case for Calculate View
    """

    def setUp(self):
        """
        Sets up client
        """
        self.client = Client()
        self.request_body = {
            "savingsAmount": 1,
            "monthlySavings": 1,
            "interestRate": 0.1
        }

    def test_post(self):
        expected_result = [1, 2.02, 3.05, 4.08, 5.12, 6.17, 7.23, 8.3, 9.38, 10.47, 11.57, 12.67, 13.78, 14.9, 16.03, 17.17, 18.32, 19.48, 20.65, 21.83, 23.02, 24.22, 25.43, 26.65, 27.88, 29.12, 30.37, 31.63, 32.9, 34.18, 35.47, 36.77, 38.08, 39.41, 40.75, 42.1, 43.46, 44.83, 46.21, 47.6, 49.01, 50.43, 51.86, 53.3, 54.75, 56.21, 57.69, 59.18, 60.68, 62.19, 63.72, 65.26, 66.81, 68.38, 69.96, 71.55, 73.15, 74.77, 76.4, 78.05, 79.71, 81.38, 83.07, 84.77, 86.48, 88.21, 89.95, 91.71, 93.48, 95.27, 97.07, 98.89, 100.72, 102.57, 104.43, 106.31, 108.2, 110.11, 112.04, 113.98, 115.94, 117.91, 119.9, 121.91, 123.93, 125.97, 128.03, 130.11, 132.2, 134.31, 136.44, 138.59, 140.75, 142.93, 145.13, 147.35, 149.59, 151.84, 154.11, 156.4, 158.71, 161.04, 163.39, 165.76, 168.15, 170.56, 172.99, 175.44, 177.91, 180.4, 182.91, 185.44, 187.99, 190.56, 193.16, 195.78, 198.42, 201.08, 203.76, 206.47, 209.2, 211.95, 214.72, 217.52, 220.34, 223.18, 226.05, 228.94, 231.86, 234.8, 237.77, 240.76, 243.77, 246.81, 249.88, 252.97, 256.09, 259.23, 262.4, 265.59, 268.81, 272.06, 275.34, 278.64, 281.97, 285.33, 288.72, 292.13, 295.57, 299.04, 302.54, 306.07, 309.63, 313.22, 316.84, 320.49, 324.17, 327.88, 331.62, 335.39, 339.19, 343.02, 346.89, 350.79, 354.72, 358.68, 362.68, 366.71, 370.77, 374.87, 379.0, 383.17, 387.37, 391.61, 395.88, 400.19, 404.53, 408.91, 413.33, 417.78, 422.27, 426.8, 431.37, 435.97, 440.61, 445.29, 450.01, 454.77, 459.57, 464.41, 469.29, 474.21, 479.17, 484.17, 489.21, 494.3, 499.43, 504.6, 509.81, 515.07, 520.37, 525.71, 531.1, 536.53, 542.01, 547.54, 553.11, 558.73, 564.39, 570.1, 575.86, 581.67, 587.53, 593.43, 599.38, 605.38, 611.43, 617.53, 623.68, 629.89, 636.15, 642.46, 648.82, 655.24, 661.71, 668.23, 674.81, 681.44, 688.13, 694.87, 701.67, 708.53, 715.44, 722.41, 729.44, 736.53, 743.68, 750.89, 758.16, 765.49, 772.88, 780.33, 787.84, 795.41, 803.05, 810.75, 818.51, 826.34, 834.23, 842.19, 850.22, 858.31, 866.47, 874.7, 883.0, 891.37, 899.81, 908.32, 916.9, 925.55, 934.27, 943.06, 951.93, 960.87, 969.89, 978.98, 988.15, 997.39, 1006.71, 1016.11, 1025.59, 1035.14, 1044.77, 1054.48, 1064.28, 1074.16, 1084.12, 1094.16, 1104.29, 1114.5, 1124.8, 1135.18, 1145.65, 1156.21, 1166.85, 1177.58, 1188.4, 1199.31, 1210.31, 1221.4, 1232.59, 1243.87, 1255.24, 1266.71, 1278.27, 1289.93, 1301.69, 1313.55, 1325.5, 1337.55, 1349.7, 1361.96, 1374.32, 1386.78, 1399.34, 1412.01, 1424.79, 1437.67, 1450.66, 1463.76, 1476.97, 1490.29, 1503.72, 1517.26, 1530.91, 1544.68, 1558.56, 1572.56, 1586.67, 1600.9, 1615.25, 1629.72, 1644.31, 1659.02, 1673.85, 1688.81, 1703.89, 1719.1, 1734.43, 1749.89, 1765.48, 1781.2, 1797.05, 1813.03, 1829.15, 1845.4, 1861.79, 1878.31, 1894.97, 1911.77, 1928.71, 1945.79, 1963.01, 1980.38, 1997.89, 2015.55, 2033.35, 2051.3, 2069.4, 2087.65, 2106.06, 2124.62, 2143.33, 2162.2, 2181.23, 2200.42, 2219.77, 2239.28, 2258.95, 2278.78, 2298.78, 2318.94, 2339.27, 2359.77, 2380.44, 2401.29, 2422.31, 2443.5, 2464.87, 2486.42, 2508.15, 2530.06, 2552.15, 2574.43, 2596.89, 2619.54, 2642.38, 2665.41, 2688.63, 2712.04, 2735.65, 2759.46, 2783.46, 2807.66, 2832.07, 2856.68, 2881.49, 2906.51, 2931.74, 2957.18, 2982.83, 3008.7, 3034.78, 3061.08, 3087.6, 3114.34, 3141.3, 3168.49, 3195.9, 3223.54, 3251.41, 3279.51, 3307.85, 3336.42, 3365.23, 3394.28, 3423.57, 3453.11, 3482.89, 3512.92, 3543.2, 3573.73, 3604.52, 3635.57, 3666.87, 3698.44, 3730.27, 3762.36, 3794.72, 3827.35, 3860.25, 3893.43, 3926.88, 3960.61, 3994.62, 4028.92, 4063.5, 4098.37, 4133.53, 4168.98, 4204.73, 4240.78, 4277.13, 4313.78, 4350.74, 4388.0, 4425.57, 4463.46, 4501.66, 4540.18, 4579.02, 4618.19, 4657.68, 4697.5, 4737.65, 4778.14, 4818.97, 4860.14, 4901.65, 4943.51, 4985.71, 5028.27, 5071.18, 5114.45, 5158.08, 5202.07, 5246.43, 5291.16, 5336.26, 5381.74, 5427.6, 5473.84, 5520.46, 5567.47, 5614.87, 5662.67, 5710.87, 5759.47, 5808.47, 5857.88, 5907.7, 5957.94, 6008.6, 6059.68, 6111.19, 6163.12, 6215.49, 6268.29, 6321.53, 6375.22, 6429.36, 6483.95, 6538.99, 6594.49, 6650.45, 6706.88, 6763.78, 6821.15, 6879.0, 6937.33, 6996.15, 7055.46, 7115.26, 7175.56, 7236.36, 7297.67, 7359.49, 7421.83, 7484.69, 7548.07, 7611.98, 7676.42, 7741.4, 7806.92, 7872.99, 7939.61, 8006.78, 8074.51, 8142.81, 8211.68, 8281.12, 8351.14, 8421.74, 8492.93, 8564.71, 8637.09, 8710.07, 8783.66, 8857.87, 8932.69, 9008.14, 9084.22, 9160.93, 9238.28, 9316.27, 9394.91, 9474.21, 9554.17, 9634.8, 9716.1, 9798.08, 9880.74, 9964.09, 10048.13, 10132.87, 10218.32, 10304.48, 10391.36, 10478.96, 10567.29, 10656.36, 10746.17, 10836.73, 10928.04, 11020.12, 11112.96, 11206.58, 11300.98, 11396.16, 11492.14, 11588.92, 11686.5, 11784.9, 11884.12, 11984.16, 12085.04, 12186.76, 12289.32, 12392.74, 12497.02, 12602.17, 12708.2, 12815.11, 12922.91, 13031.61, 13141.22, 13251.74, 13363.18, 13475.55, 13588.85, 13703.1, 13818.3, 13934.46, 14051.59, 14169.69, 14288.78, 14408.86, 14529.94, 14652.03, 14775.14, 14899.27, 15024.44, 15150.65, 15277.91, 15406.23, 15535.62, 15666.09, 15797.65, 15930.31, 16064.07, 16198.95, 16334.95, 16472.08, 16610.36, 16749.79, 16890.38, 17032.14, 17175.08, 17319.21, 17464.55, 17611.1]
        response = self.client.post('/calculate/', self.request_body)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.data, {'result': expected_result})